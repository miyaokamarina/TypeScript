=== tests/cases/compiler/constEnumBigInt.ts ===
const enum E1 {
>E1 : Symbol(E1, Decl(constEnumBigInt.ts, 0, 0))

    n1 = 10n,
>n1 : Symbol(E1.n1, Decl(constEnumBigInt.ts, 0, 15))

    n2 = n1,
>n2 : Symbol(E1.n2, Decl(constEnumBigInt.ts, 1, 13))
>n1 : Symbol(E1.n1, Decl(constEnumBigInt.ts, 0, 15))

    n3 = n2 + 1,
>n3 : Symbol(E1.n3, Decl(constEnumBigInt.ts, 2, 12))
>n2 : Symbol(E1.n2, Decl(constEnumBigInt.ts, 1, 13))

    n4 = n2 + 1n,
>n4 : Symbol(E1.n4, Decl(constEnumBigInt.ts, 3, 16))
>n2 : Symbol(E1.n2, Decl(constEnumBigInt.ts, 1, 13))

    n5,
>n5 : Symbol(E1.n5, Decl(constEnumBigInt.ts, 4, 17))

    n6 = ~n5,
>n6 : Symbol(E1.n6, Decl(constEnumBigInt.ts, 5, 7))
>n5 : Symbol(E1.n5, Decl(constEnumBigInt.ts, 4, 17))

    n7 = -n6,
>n7 : Symbol(E1.n7, Decl(constEnumBigInt.ts, 6, 13))
>n6 : Symbol(E1.n6, Decl(constEnumBigInt.ts, 5, 7))

    n8 = n7 >> 1n,
>n8 : Symbol(E1.n8, Decl(constEnumBigInt.ts, 7, 13))
>n7 : Symbol(E1.n7, Decl(constEnumBigInt.ts, 6, 13))

    n9 = n8 << 1n,
>n9 : Symbol(E1.n9, Decl(constEnumBigInt.ts, 8, 18))
>n8 : Symbol(E1.n8, Decl(constEnumBigInt.ts, 7, 13))

    n10 = n8 | n9,
>n10 : Symbol(E1.n10, Decl(constEnumBigInt.ts, 9, 18))
>n8 : Symbol(E1.n8, Decl(constEnumBigInt.ts, 7, 13))
>n9 : Symbol(E1.n9, Decl(constEnumBigInt.ts, 8, 18))

    n11 = n9 & n10,
>n11 : Symbol(E1.n11, Decl(constEnumBigInt.ts, 10, 18))
>n9 : Symbol(E1.n9, Decl(constEnumBigInt.ts, 8, 18))
>n10 : Symbol(E1.n10, Decl(constEnumBigInt.ts, 9, 18))

    n12 = n10 ^ n11,
>n12 : Symbol(E1.n12, Decl(constEnumBigInt.ts, 11, 19))
>n10 : Symbol(E1.n10, Decl(constEnumBigInt.ts, 9, 18))
>n11 : Symbol(E1.n11, Decl(constEnumBigInt.ts, 10, 18))

    n13 = n12 - 1n,
>n13 : Symbol(E1.n13, Decl(constEnumBigInt.ts, 12, 20))
>n12 : Symbol(E1.n12, Decl(constEnumBigInt.ts, 11, 19))

    n14 = n13 * 2n,
>n14 : Symbol(E1.n14, Decl(constEnumBigInt.ts, 13, 19))
>n13 : Symbol(E1.n13, Decl(constEnumBigInt.ts, 12, 20))

    n15 = n14 / 2n,
>n15 : Symbol(E1.n15, Decl(constEnumBigInt.ts, 14, 19))
>n14 : Symbol(E1.n14, Decl(constEnumBigInt.ts, 13, 19))

    n16 = (n13 * n14) + n15,
>n16 : Symbol(E1.n16, Decl(constEnumBigInt.ts, 15, 19))
>n13 : Symbol(E1.n13, Decl(constEnumBigInt.ts, 12, 20))
>n14 : Symbol(E1.n14, Decl(constEnumBigInt.ts, 13, 19))
>n15 : Symbol(E1.n15, Decl(constEnumBigInt.ts, 14, 19))

    n17 = +n16,
>n17 : Symbol(E1.n17, Decl(constEnumBigInt.ts, 16, 28))
>n16 : Symbol(E1.n16, Decl(constEnumBigInt.ts, 15, 19))

    n18 = n17 % 2n,
>n18 : Symbol(E1.n18, Decl(constEnumBigInt.ts, 17, 15))
>n17 : Symbol(E1.n17, Decl(constEnumBigInt.ts, 16, 28))

    n19 = 0n / 0n,
>n19 : Symbol(E1.n19, Decl(constEnumBigInt.ts, 18, 19))
}

const enum E2 {
>E2 : Symbol(E2, Decl(constEnumBigInt.ts, 20, 1))

    n1 = 1n,
>n1 : Symbol(E2.n1, Decl(constEnumBigInt.ts, 22, 15))

    n2,
>n2 : Symbol(E2.n2, Decl(constEnumBigInt.ts, 23, 12))
}

const a = E1.n1 as const;
>a : Symbol(a, Decl(constEnumBigInt.ts, 27, 5))
>E1.n1 : Symbol(E1.n1, Decl(constEnumBigInt.ts, 0, 15))
>E1 : Symbol(E1, Decl(constEnumBigInt.ts, 0, 0))
>n1 : Symbol(E1.n1, Decl(constEnumBigInt.ts, 0, 15))

const b = E2.n2 as const;
>b : Symbol(b, Decl(constEnumBigInt.ts, 28, 5))
>E2.n2 : Symbol(E2.n2, Decl(constEnumBigInt.ts, 23, 12))
>E2 : Symbol(E2, Decl(constEnumBigInt.ts, 20, 1))
>n2 : Symbol(E2.n2, Decl(constEnumBigInt.ts, 23, 12))


enum E3 {
>E3 : Symbol(E3, Decl(constEnumBigInt.ts, 28, 25))

    n1 = 10n,
>n1 : Symbol(E3.n1, Decl(constEnumBigInt.ts, 31, 9))
}

